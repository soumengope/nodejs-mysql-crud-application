<% if(page>1){ %>
        <a href="/?page=<% page-1 %>"></a>
      <% } %>
      
      <% for(let i= iterator; i<=endingLink; i++) {%>
      <% if(i==page){ %>
        <a href="/?page = <%- i %>"><%- i %></a>
        <% continue; %>
       <% } %> 
       <a href="/?page=<%-i%>"><%- i %></a>
    <% } %>

    <% if(page < numberOfPages){ %>
      <a href="/?page=<% page+1 %>"></a>
    <% } %>

const express = require('express');
const mysql = require('mysql');
require('dotenv').config();
const path = require("path");


const app = express();
const port = process.env.PORT || 5000;

//set static css file
const static_css = path.join(__dirname,"/public/css"); 
const static_photos= path.join(__dirname,"/photos");
app.use("/css",express.static(static_css));
app.use(express.json());
app.use(express.urlencoded({extended:false}));
app.use('/photos',express.static(static_photos));

//set template engine
app.set("views","./views") ;
app.set("view engine","ejs");

//create connection for mysql
const db = mysql.createConnection({
    host : 'localhost',
    user : 'root',
    password : '',
    database : 'nodemysql'
});

//connect to mysql
db.connect((err)=>{
    if(err){throw err}
    console.log('mysql connected')
})  


//create routes
app.get('/',(req,res)=>{
    //content per page
    const resultPerPage = 3;
    db.query("SELECT * FROM employeetable", function (err, result) {
        if (err) throw err;
        //res.render('index',{data:result});
        //total post inside dtabase
        const result_number = result.length;
        console.log('total post',result_number)
        //total page number
        const numberOfPages = Math.ceil(result_number/resultPerPage);
        console.log('total page',numberOfPages)
        //let page = 1;
        let page = req.query.page ? Number(req.query.page): 1 ;
        if(page > numberOfPages){
            res.redirect('/?page='+encodeURIComponent(numberOfPages));
        }else if(page < 1){
            res.redirect('/?page='+encodeURIComponent('1'));
        }
        //starting page limit(how many content in the first page)
        const limitPage = (page-1)*resultPerPage;
        console.log('limitpage',limitPage)
        // //get the relevant number of posts for this starting page
        sql = `SELECT * FROM employeetable LIMIT ${limitPage} , ${resultPerPage}`;
        console.log(sql)
        db.query(sql,(err,result)=>{
            if(err){throw err}
            let iterator = (page-5) < 1 ? 1 : (page-5);
            console.log('iterator',iterator)
            let endingLink = (iterator+9) <= numberOfPages?(iterator+9):page=(numberOfPages-page);
            console.log('endingLink',endingLink)
            if(endingLink < (page-4)){
                iterator -= (page+4)-numberOfPages;
                console.log('iterator',iterator)
            }
            res.render('index',{data:result,page,iterator,endingLink,numberOfPages})
        })

      });
})

app.get('/addEmployee',(req,res)=>{
    res.render('addEmployee',{message:"enter values"});
})

app.post('/addEmployee',(req,res)=>{
    if(req.body.submit='submit'){
        const fullName = req.body.fullName;
        const jobTitle = req.body.jobTitle;
        const phoneNum = req.body.phoneNum;
        const email = req.body.email;
        const address = req.body.address;
        const city = req.body.city;
        const state = req.body.state;
        const primEmergency_contactName = req.body.primEmergency_contactName;
        const primEmergency_phoneNum = req.body.primEmergency_phoneNum;
        const primEmergency_relation = req.body.primEmergency_relation;
        const secEmergency_contactName = req.body.secEmergency_contactName;
        const secEmergency_phoneNum = req.body.secEmergency_phoneNum;
        const secEmergency_relation = req.body.secEmergency_relation;
        let data = {employee_fullName:fullName,job_title:jobTitle,phone_num:phoneNum,email:email,
        address:address,city:city,state:state,primEmergency_contactName:primEmergency_contactName,
        primEmergency_phoneNum:primEmergency_phoneNum,primEmergency_relation:primEmergency_relation,
        secEmergency_contactName:secEmergency_contactName,secEmergency_phoneNum:secEmergency_phoneNum,
        secEmergency_relation:secEmergency_relation};
        let sql = 'INSERT INTO employeetable SET ?';
        db.query(sql,data,(err,result)=>{
            if(err){
                res.render('addEmployee',{message:err.message,type:'danger'})
            }
            console.log(result);
            res.render('addEmployee',{message:'succesfully created post',type:'success'});
        })
    }
})

app.get('/edit/:id',(req,res)=>{
    let id = req.params.id;
    db.query(`SELECT * FROM employeetable WHERE user_id = ${id}`, (err, result)=> {
        if (err) throw err;
        res.render('edit_user',{user:result});
    });
})

app.post('/update_user/:id',(req,res)=>{
    let id = req.params.id;
    if(req.body.submit='submit'){
        const fullName = req.body.fullName;
        const jobTitle = req.body.jobTitle;
        const phoneNum = req.body.phoneNum;
        const email = req.body.email;
        const address = req.body.address;
        const city = req.body.city;
        const state = req.body.state;
        const primEmergency_contactName = req.body.primEmergency_contactName;
        const primEmergency_phoneNum = req.body.primEmergency_phoneNum;
        const primEmergency_relation = req.body.primEmergency_relation;
        const secEmergency_contactName = req.body.secEmergency_contactName;
        const secEmergency_phoneNum = req.body.secEmergency_phoneNum;
        const secEmergency_relation = req.body.secEmergency_relation;
        let data = {employee_fullName:fullName,job_title:jobTitle,phone_num:phoneNum,email:email,
        address:address,city:city,state:state,primEmergency_contactName:primEmergency_contactName,
        primEmergency_phoneNum:primEmergency_phoneNum,primEmergency_relation:primEmergency_relation,
        secEmergency_contactName:secEmergency_contactName,secEmergency_phoneNum:secEmergency_phoneNum,
        secEmergency_relation:secEmergency_relation};
        let sql = `UPDATE employeetable SET ? WHERE user_id = ${id}`;
        db.query(sql,data,(err,result)=>{
            if(err){
                res.json({message:err.message,type:'danger'})
            }
            //res.json({message:"success"});
            res.redirect('/');
        })
    }
})

app.get('/delete/:id',(req,res)=>{
    let id = req.params.id;
    db.query(`DELETE from employeetable WHERE user_id = ${id}`, (err, result)=> {
        if (err) throw err;
        res.redirect('/');
    });
})

app.listen(port,()=>{
    console.log(`server is running on port ${port}`);
})